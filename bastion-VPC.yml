AWSTemplateFormatVersion: 2010-09-09
Description: Deploys EC2 with installed OpenVPN client and connects to given endpoint using OpenVPN config file from previously provisioned S3 bucket (bastion-bucket.yml CloudFormation template).
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Type
        Parameters:
          - pDeploymentType
      - Label:
          default: Configuration
        Parameters:          
          - pLatestAmiId
          - pCidr
          - pInstanceType
          - pS3Key
          - pVpnConcentratorIp
          - pVolumeType
          - pVolumeSize
    ParameterLabels:
      pDeploymentType:
        default: Deploy just launch template for emphemeral EC2 or permanent EC2?
      pLatestAmiId:
        default: Systems Manager Parameter for AMI
      pCidr:
        default: CIDR block for VPC and subnet
      pInstanceType:
        default: EC2 Instance Type
      pS3Key:
        default: S3 Key (file path) of the OpenVPN config
      pVpnConcentratorIp:
        default: IP Address of the VPN concentrator
      pVolumeType:
        default: Type of the EBS volume gp2, gp3, io1 or io2.
      pVolumeSize:
        default: "Size of the EBS volume in GiB, at least 8GiB is required."

Parameters:
  # Systems Manager Parameter is used to find the latest Amazon Linux 2 AMI ID
  # Amazon Linux 2 is preloaded with the SSM Agent
  pDeploymentType:
    Type: String
    Default: EphemeralInstance
    AllowedValues:
      - EphemeralInstance
      - PermanentInstance
    Description: Ephemeral Instance deploys just EC2 Launch Template which you can spin up anytime you would like to access your VPN. As soon as you stop the instance, it will be terminated and EBS deleted. No charges. Permanent Instance deploys and starts EC2 with EBS storage, which will be provisioned until explicitely terminated/deleted.
  pLatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  pCidr:
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  pInstanceType:
    Type: String
    Default: t2.micro
    Description: Select a valid instance type for your Region
    AllowedValues:
    # add instance types to this list as desired
    - t2.micro
    - t3.micro
    - m4.large
    - m5.large
  pS3Key:
    Type: String
    Description: The S3 key (path) to the OpenVPN config file.
  pVpnConcentratorIp:
    Type: String
    Description: The IP address of the VPN concentrator for outbound VPN connections.
    AllowedPattern: ^(\d{1,3}\.){3}\d{1,3}$
  pVolumeType:
    Type: String
    Default: gp3
    AllowedValues:
    - gp2
    - gp3
    - io1
    - io3
  pVolumeSize:
    Type: Number
    Default: 8
    MinValue: 8
    MaxValue: 1024
    
Conditions:
  cEphemeralInstance: !Equals 
    - !Ref pDeploymentType
    - "EphemeralInstance"
  cPermanentInstance: !Not 
    - !Condition cEphemeralInstance
    
Resources:
  rVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pCidr
      EnableDnsHostnames: True
      EnableDnsSupport: True
  rEc2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref rEc2InstanceRole
  rEc2InstanceRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore     
      Policies:
        - PolicyName: AccessOpenVPNFileInS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 
                  Fn::Join: 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !ImportValue OpenVPNFileBucketName
                      - '/*'

  rEc2Instance:
    Type: AWS::EC2::Instance
    Condition: cPermanentInstance
    Properties:
      ImageId: !Ref pLatestAmiId
      InstanceType: !Ref pInstanceType
      SubnetId: !Ref rPublicSubnet
      IamInstanceProfile: !Ref rEc2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: true
            VolumeType: !Ref pVolumeType
            VolumeSize: !Ref pVolumeSize
      SecurityGroupIds:
        - !Ref rSecurityGroupEc2Instance
      Tags:
        - Value: BastionSsmInstance
          Key: Name
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash
            # Update and install necessary packages
            amazon-linux-extras install -y epel
            yum install -y openvpn
            # aws-cli is already installed in Amazon Linux 2 AMIs

            # Copy OpenVPN configuration file from S3
            aws s3 cp s3://${OVPNFileBucketName}/${pS3Key} /etc/openvpn/aws.ovpn

            # Set permissions for OpenVPN config file
            chmod 600 /etc/openvpn/aws.ovpn

            # Create a systemd service for OpenVPN
            cat <<'EOF' > /etc/systemd/system/openvpn@.service
            [Unit]
            Description=OpenVPN connection to %i
            After=network.target

            [Service]
            Type=simple
            ExecStart=/usr/sbin/openvpn --remote ${pVpnConcentratorIp} --config /etc/openvpn/aws.ovpn

            [Install]
            WantedBy=multi-user.target
            EOF

            # Enable and start OpenVPN service
            systemctl enable openvpn@aws
            systemctl start openvpn@aws            
          - OVPNFileBucketName: !ImportValue OpenVPNFileBucketName

  rEc2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: cEphemeralInstance
    Properties:
      LaunchTemplateName: BastionSsmInstance
      LaunchTemplateData:
        ImageId: !Ref pLatestAmiId
        InstanceType: !Ref pInstanceType
        NetworkInterfaces:
          - DeviceIndex: 0
            SubnetId: !Ref rPublicSubnet
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref rSecurityGroupEc2Instance
        IamInstanceProfile:
          Arn: !GetAtt rEc2InstanceProfile.Arn
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              DeleteOnTermination: true
              VolumeType: !Ref pVolumeType
              VolumeSize: !Ref pVolumeSize
        InstanceInitiatedShutdownBehavior: terminate
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: BastionSsmInstance
        UserData:
          Fn::Base64: !Sub 
              - |
                #!/bin/bash
                # Update and install necessary packages
                amazon-linux-extras install -y epel
                yum install -y openvpn
                # aws-cli is already installed in Amazon Linux 2 AMIs

                # Copy OpenVPN configuration file from S3
                aws s3 cp s3://${OVPNFileBucketName}/${pS3Key} /etc/openvpn/aws.ovpn

                # Set permissions for OpenVPN config file
                chmod 600 /etc/openvpn/aws.ovpn

                # Create a systemd service for OpenVPN
                cat <<'EOF' > /etc/systemd/system/openvpn@.service
                [Unit]
                Description=OpenVPN connection to %i
                After=network.target

                [Service]
                Type=simple
                ExecStart=/usr/sbin/openvpn --remote ${pVpnConcentratorIp} --config /etc/openvpn/aws.ovpn

                [Install]
                WantedBy=multi-user.target
                EOF

                # Enable and start OpenVPN service
                systemctl enable openvpn@aws
                systemctl start openvpn@aws
              - OVPNFileBucketName: !ImportValue OpenVPNFileBucketName

  rPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pCidr
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVpc
  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
  rDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: rVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
  rInternetGateway:
    Type: AWS::EC2::InternetGateway
  rVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVpc
      InternetGatewayId: !Ref rInternetGateway
  rSecurityGroupEc2Instance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for EC2 Instance
      VpcId: !Ref rVpc
      # Despite this security group containing no ingress rules, Session 
      # Manager can still provide shell access 
      SecurityGroupEgress:
      # The SSM Agent connects to Session Manager over TCP 443
      - Description: allow outbound HTTP anywhere
        CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - Description: allow outbound HTTPS anywhere
        CidrIp: 0.0.0.0/0
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - Description: allow outbound VPN traffic
        CidrIp: !Sub "${pVpnConcentratorIp}/32"
        FromPort: 1194
        ToPort: 1194
        IpProtocol: udp
  rPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rPublicRouteTable
      SubnetId: !Ref rPublicSubnet
